<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How to use Flask in production environment</title>
      <link href="/en/2023/08/07/flask-deployment/"/>
      <url>/en/2023/08/07/flask-deployment/</url>
      
        <content type="html"><![CDATA[<p>In this tutorial, I will teach you how to deploy Falsk app in prodcution environment. Falsk is a Web framework that can be used to build a website or interface.</p><p>When run Flask app directly, we always see the following warning.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.</span><br></pre></td></tr></table></figure><p>This message warns us not to use Falsk in production enviroment, as most services needs to process requests parallelly while running Falsk directly can’t support parallel processing. To address this issue, we need to use <code>wsgi server</code>. </p><p>In this blog, I will show you using <code>gunicorn</code> to build <code>wsgi server</code> and provide generic code example for you.</p><h1 id="Set-up-environment"><a href="#Set-up-environment" class="headerlink" title="Set up environment"></a>Set up environment</h1><p>First, download the required python libraries.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br><span class="line">pip install gevent</span><br></pre></td></tr></table></figure><p>Then, run the following code to check if it is avaliable.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output: gunicorn (version 21.2.0)</span></span><br></pre></td></tr></table></figure><h1 id="Deploy-Flask-service-using-gunicorn"><a href="#Deploy-Flask-service-using-gunicorn" class="headerlink" title="Deploy Flask service using gunicorn"></a>Deploy Flask service using gunicorn</h1><p>Now, you can write your flask code for processing users’ requests. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;ok&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;message&#x27;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8124</span>)</span><br></pre></td></tr></table></figure><p>I recommend using configuration file to provide neccessary parameters for gunicorn. So, let’s create a configuration file named <code>gunicorn_conf.py</code>. In this file, you can specify the corresponding settings.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a gunicorn config file, which is used to start the server.</span></span><br><span class="line"></span><br><span class="line">preload_app = <span class="literal">False</span> <span class="comment"># Setting preload_app to False will disable this behaviour, and will result in each worker loading the application code when it starts.</span></span><br><span class="line">workers = <span class="number">3</span> <span class="comment"># The number of worker processes for handling requests.</span></span><br><span class="line">bind = <span class="string">&#x27;0.0.0.0:8123&#x27;</span> <span class="comment"># The socket to bind.</span></span><br><span class="line">worker_class = <span class="string">&#x27;gevent&#x27;</span> <span class="comment"># The type of workers to use.</span></span><br><span class="line"><span class="comment"># threads = 6 # The number of worker threads for handling requests.</span></span><br><span class="line">backlog = <span class="number">3</span> <span class="comment"># The maximum number of pending connections.</span></span><br><span class="line">worker_connections = <span class="number">10</span> <span class="comment"># The maximum number of simultaneous clients.</span></span><br><span class="line">accesslog = <span class="string">&#x27;logs/access.log&#x27;</span> <span class="comment"># The Access log file to write to.</span></span><br><span class="line">access_log_format = <span class="string">&#x27;%(h)s %(t)s %(U)s %(q)s&#x27;</span> <span class="comment"># The access log format.</span></span><br><span class="line">debug = <span class="literal">True</span> <span class="comment"># Debug mode.</span></span><br><span class="line">proc_name = <span class="string">&#x27;gunicorn.pid&#x27;</span> <span class="comment"># A base to use with setproctitle for process naming.</span></span><br><span class="line">pidfile = <span class="string">&#x27;logs/gunicorn.pid&#x27;</span> <span class="comment"># A filename to use for the PID file.</span></span><br><span class="line">timeout = <span class="number">300</span> <span class="comment"># Workers silent for more than this many seconds are killed and restarted.</span></span><br></pre></td></tr></table></figure><p>Of course, you should change these settings correspondingly.</p><p>Now, you can create another shell file to help you start the gunicorn server. Here I will provide you a example named <code>process.sh</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">activate python environment</span></span><br><span class="line">export PATH=/data/XXX/anaconda3/envs/python37/bin:$PATH</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is a shell script <span class="keyword">for</span> starting or stopping python program</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">receive one parameter, start or stop</span></span><br><span class="line"></span><br><span class="line">if [ $# -lt 1 ]                   # if the number of parameters is less than 1</span><br><span class="line">then</span><br><span class="line">    echo $0&quot; &lt;start|stop|restart&gt;&quot; # print the usage</span><br><span class="line">    exit                           # exit</span><br><span class="line">else</span><br><span class="line">    command=$1                    # otherwise, get the first parameter</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">basepath=$(cd `dirname $0`; pwd)  # obtain the absolute path of this shell script</span><br><span class="line">PID=$basepath&quot;/logs/gunicorn.pid&quot; # this is the PID file path of gunicorn</span><br><span class="line"></span><br><span class="line">if [ $command == &quot;start&quot; ]; then  # if the first parameter is start</span><br><span class="line">    if [ -e $PID ]; then          # if PID file already exists</span><br><span class="line">        echo &quot;ERROR: process aready start, if you want to restart, please first stop process&quot; # print error message</span><br><span class="line">    else                          # else</span><br><span class="line">        gunicorn -c gunicorn_conf.py clustered_topic_interface:app  &gt; logs/runlog.txt 2&gt;&amp;1 &amp; # luanched gunicorn ***</span><br><span class="line">        echo &quot;start success&quot;      # print success message</span><br><span class="line">    fi</span><br><span class="line">elif [ $command == &quot;stop&quot; ]; then # if the first parameter is stop</span><br><span class="line">    if [ ! -e $PID ]; then        # if PID file does not exist</span><br><span class="line">        echo &quot;please start before stop&quot; # print error message</span><br><span class="line">    else                          # else</span><br><span class="line">        kill -9 $(cat $&#123;PID&#125;)     # kill the process</span><br><span class="line">        echo &quot;stop $(cat $&#123;PID&#125;) success&quot; # print success message</span><br><span class="line">        rm $PID                   # remove the PID file</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>Now, run the <code>process.sh</code> file to start the flask services. That’s all!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Welcome to my English blog</title>
      <link href="/en/2023/07/20/my-first-english-blog/"/>
      <url>/en/2023/07/20/my-first-english-blog/</url>
      
        <content type="html"><![CDATA[<p>Hi! friends, WELCOME to my blog, I am Orange, a data science engineer working in Beijing, China. This is my first English blog, I am really excited!!! </p><p>I am an English enthusiast, and have learned English on my own for one and a half year, school education excluded. I know my English is still poor, that’s also the reason why I created this English website. On the one hand, I am a person who love  sharing, on the other hand, I want to use this website as a way for others to know me. I will not only share thing about technology, but also share my personal life, like annual plans, photography, travelling journal, etc. </p><p>I love travelling, photograpy and English learning! I would love to make friends with  all over the world. </p><p>continuing…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Self-introduction </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
